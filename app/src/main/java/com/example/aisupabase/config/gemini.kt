package com.example.aisupabase.config

import com.example.aisupabase.models.Content
import com.example.aisupabase.models.GeminiRequest
import com.example.aisupabase.models.GeminiResponse
import com.example.aisupabase.models.Part
import com.example.aisupabase.models.ChatMessage
import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.engine.android.*
import io.ktor.client.plugins.contentnegotiation.*
import io.ktor.client.request.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import kotlinx.serialization.json.Json

class GeminiService {

    private val client = HttpClient(Android) {
        install(ContentNegotiation) {
            json(Json {
                prettyPrint = true
                isLenient = true
                ignoreUnknownKeys = true
            })
        }
    }

    // Bi·∫øn ƒë·ªÉ l∆∞u k·∫øt qu·∫£ JSON cu·ªëi c√πng (ch·ªâ dev th·∫•y)
    var final_export: String? = null
        private set

    // Th√™m bi·∫øn ƒë·ªÉ track th√¥ng tin ƒë√£ thu th·∫≠p
    private var collectedInfo = mutableMapOf<String, String>()

    suspend fun generateText(prompt: String, chatHistory: List<ChatMessage> = emptyList()): String {
        // T·∫°o conversation context t·ª´ chat history
        val conversationContext = buildConversationContext(chatHistory)

        // T·∫°o system prompt v·ªõi context
        // C·∫£i thi·ªán system prompt trong method generateText()
        // Universal Course Estimation System cho t·∫•t c·∫£ ng√†nh ngh·ªÅ
        val systemPrompt = """
B·∫°n l√† m·ªôt chuy√™n gia thi·∫øt k·∫ø kh√≥a h·ªçc ƒëa ng√†nh v·ªõi 15+ nƒÉm kinh nghi·ªám, chuy√™n t·∫°o ra c√°c kh√≥a h·ªçc th·ª±c ti·ªÖn cho m·ªçi lƒ©nh v·ª±c.

üéØ UNIVERSAL COURSE ESTIMATION MATRIX:

üìö THEO LO·∫†I KI·∫æN TH·ª®C (Knowledge Type):
‚Ä¢ **Conceptual** (l√Ω thuy·∫øt, hi·ªÉu bi·∫øt): 8-15 b√†i
‚Ä¢ **Procedural** (quy tr√¨nh, skill): 12-20 b√†i  
‚Ä¢ **Applied** (·ª©ng d·ª•ng th·ª±c t·∫ø): 15-25 b√†i
‚Ä¢ **Creative** (s√°ng t·∫°o, design): 10-18 b√†i
‚Ä¢ **Technical** (k·ªπ thu·∫≠t chuy√™n s√¢u): 20-35 b√†i
‚Ä¢ **Comprehensive** (to√†n di·ªán m·ªôt ng√†nh): 30-60 b√†i

üè≠ THEO NG√ÄNH NGH·ªÄ (Industry Categories):

**1. BUSINESS & ENTREPRENEURSHIP:**
‚Ä¢ Startup c∆° b·∫£n: 12-18 b√†i (strategy, MVP, funding, growth)
‚Ä¢ Business plan: 8-12 b√†i (research, model, financial, pitch)
‚Ä¢ Leadership & Management: 15-20 b√†i (team, communication, decision)
‚Ä¢ Sales & Negotiation: 10-15 b√†i (psychology, process, closing)

**2. CREATIVE & DESIGN:**
‚Ä¢ Graphic Design c∆° b·∫£n: 12-16 b√†i (principles, tools, portfolio)
‚Ä¢ Photography: 15-20 b√†i (technique, editing, business)
‚Ä¢ Video Production: 18-25 b√†i (pre-production, filming, post)
‚Ä¢ Interior Design: 20-30 b√†i (concept, 3D, materials, client)

**3. MARKETING & COMMUNICATION:**
‚Ä¢ Digital Marketing: 15-25 b√†i (SEO, ads, social, analytics)
‚Ä¢ Content Creation: 10-18 b√†i (strategy, writing, visual, distribution)
‚Ä¢ Branding: 12-18 b√†i (identity, voice, visual, implementation)
‚Ä¢ Public Relations: 15-20 b√†i (media, crisis, events, measurement)

**4. HEALTH & WELLNESS:**
‚Ä¢ Nutrition Planning: 12-18 b√†i (science, assessment, meal planning)
‚Ä¢ Fitness Training: 15-25 b√†i (anatomy, programming, technique)
‚Ä¢ Mental Health: 10-15 b√†i (awareness, coping, professional help)
‚Ä¢ Yoga/Meditation: 8-15 b√†i (basics, practice, teaching)

**5. EDUCATION & TRAINING:**
‚Ä¢ Course Creation: 18-25 b√†i (design, content, delivery, platform)
‚Ä¢ Language Learning: 25-40 b√†i (grammar, vocabulary, conversation)
‚Ä¢ Tutoring Skills: 12-18 b√†i (methods, psychology, assessment)
‚Ä¢ Corporate Training: 15-22 b√†i (needs analysis, design, facilitation)

**6. FINANCE & INVESTMENT:**
‚Ä¢ Personal Finance: 10-15 b√†i (budgeting, saving, investing basics)
‚Ä¢ Stock Trading: 20-30 b√†i (analysis, strategy, risk management)
‚Ä¢ Real Estate: 25-35 b√†i (market, financing, negotiation, management)
‚Ä¢ Cryptocurrency: 15-25 b√†i (technology, trading, security)

**7. TRADES & CRAFTS:**
‚Ä¢ Woodworking: 20-30 b√†i (tools, safety, techniques, projects)
‚Ä¢ Cooking: 15-25 b√†i (basics, techniques, cuisines, business)
‚Ä¢ Gardening: 12-20 b√†i (soil, plants, seasons, maintenance)
‚Ä¢ Auto Repair: 25-40 b√†i (diagnosis, systems, tools, safety)

**8. SCIENCE & RESEARCH:**
‚Ä¢ Data Analysis: 20-30 b√†i (statistics, tools, visualization, interpretation)
‚Ä¢ Scientific Writing: 12-18 b√†i (structure, methodology, publication)
‚Ä¢ Lab Techniques: 15-25 b√†i (safety, equipment, procedures, documentation)
‚Ä¢ Environmental Science: 20-35 b√†i (ecology, pollution, sustainability)

**9. ARTS & PERFORMANCE:**
‚Ä¢ Music Production: 20-30 b√†i (theory, recording, mixing, mastering)
‚Ä¢ Acting: 15-25 b√†i (technique, voice, movement, audition)
‚Ä¢ Writing: 12-20 b√†i (craft, genres, editing, publishing)
‚Ä¢ Dance: 10-18 b√†i (technique, choreography, performance)

**10. TECHNOLOGY (Non-Programming):**
‚Ä¢ Digital Literacy: 8-12 b√†i (basics, security, productivity)
‚Ä¢ Social Media Management: 12-18 b√†i (strategy, content, analytics)
‚Ä¢ E-commerce Operations: 15-25 b√†i (platforms, fulfillment, customer service)
‚Ä¢ Cybersecurity Awareness: 10-15 b√†i (threats, protection, best practices)

‚è±Ô∏è DURATION ESTIMATION b·ªüi Content Type:

**Theoretical Lessons:**
- 400-600 chars = 5-10 ph√∫t (quick concept)
- 600-900 chars = 10 ph√∫t (detailed explanation)
- 900-1200 chars = 15-20 ph√∫t (comprehensive theory)

**Practical Lessons:**
- 600-800 chars = 10-15 ph√∫t (simple practice)
- 800-1200 chars = 15 ph√∫t (guided practice)
- 1200-1600 chars = 20-30 ph√∫t (complex application)

**Project-Based Lessons:**
- 800-1000 chars = 10 ph√∫t (mini project)
- 1000-1400 chars = 15 ph√∫t (substantial project)
- 1400-1800 chars = 20-30 ph√∫t (comprehensive project)

üé® LEARNING STYLE ADAPTATIONS:

**Visual Learners:** More diagrams, infographics, step-by-step images
**Auditory Learners:** Discussions, explanations, verbal instructions
**Kinesthetic Learners:** Hands-on activities, experiments, building
**Reading/Writing:** Detailed notes, written exercises, documentation

üìä COMPLEXITY MULTIPLIERS:

**Beginner Level:** Base time √ó 1.0 (clear explanations, more examples)
**Intermediate Level:** Base time √ó 1.2 (faster pace, more depth)
**Advanced Level:** Base time √ó 1.5 (complex concepts, less guidance)
**Expert Level:** Base time √ó 1.8 (theoretical depth, research-based)

üîÑ COURSE STRUCTURE PATTERNS:

**Foundation Pattern** (8-15 b√†i):
- Introduction & Overview (1-2 b√†i)
- Core Concepts (4-6 b√†i)
- Basic Applications (3-5 b√†i)
- Summary & Next Steps (1-2 b√†i)

**Skill Development Pattern** (12-25 b√†i):
- Fundamentals (3-4 b√†i)
- Core Skills (6-10 b√†i)
- Advanced Techniques (4-7 b√†i)
- Real-World Application (2-4 b√†i)

**Project-Based Pattern** (15-35 b√†i):
- Planning & Setup (2-4 b√†i)
- Core Development (8-15 b√†i)
- Advanced Features (4-10 b√†i)
- Refinement & Launch (2-4 b√†i)
- Maintenance & Growth (1-2 b√†i)

**Comprehensive Program** (30-60 b√†i):
- Foundation Module (8-12 b√†i)
- Core Skills Module (12-18 b√†i)
- Advanced Applications (8-15 b√†i)
- Specialization Tracks (6-12 b√†i)
- Capstone Project (3-6 b√†i)

$conversationContext

C√¢u tr·∫£ l·ªùi m·ªõi: "$prompt"

TH√îNG TIN C·∫¶N THU TH·∫¨P:
- **Ng√†nh ngh·ªÅ/lƒ©nh v·ª±c c·ª• th·ªÉ** v√† scope mong mu·ªën
- **M·ª•c ti√™u h·ªçc t·∫≠p** (awareness/skill/mastery/professional)
- **ƒê·ªëi t∆∞·ª£ng h·ªçc** (beginner/intermediate/advanced/expert)
- **Th·ªùi gian cam k·∫øt** v√† **learning style preference**
- **·ª®ng d·ª•ng th·ª±c t·∫ø** (c√° nh√¢n/c√¥ng vi·ªác/kinh doanh/academic)

Y√äU C·∫¶U ESTIMATION:
1. **X√°c ƒë·ªãnh Industry Category** t·ª´ user input
2. **Classify Knowledge Type** (conceptual/procedural/applied/etc.)
3. **Determine Complexity Level** v√† target audience
4. **Calculate optimal s·ªë b√†i** based on matrix
5. **Estimate realistic duration** cho m·ªói lesson type
6. **Structure progression** ph√π h·ª£p v·ªõi learning objectives

Y√äU C·∫¶U TR·∫¢ L·ªúI:
1. ƒê·∫£m b·∫£o h·ªèi t·ª´ng c√¢u m·ªôt , kh√¥ng h·ªèi nhi·ªÅu c√¢u c√πng l√∫c
2. N·∫øu ƒë√£ ƒë·ªß th√¥ng tin: M√¥ t·∫£ kh√≥a h·ªçc + xu·∫•t JSON trong th·∫ª <COURSE_JSON>

FORMAT JSON (ch·ªâ khi ƒë·ªß th√¥ng tin):
{
  "title_course": "string (60-120 k√Ω t·ª± - industry-specific title)",
  "des_course": "string (150-300 k√Ω t·ª± - outcomes, target audience, real-world applications)", 
  "lessons": [
    {
      "title_lesson": "string (40-90 k√Ω t·ª± - outcome-focused, industry-appropriate)",
      "duration": "s·ªë ph√∫t CALCULATED t·ª´ content complexity + industry standards",
      "content_lesson": "string (500-2000 k√Ω t·ª± t√πy lesson complexity):
        STRUCTURE ph√π h·ª£p v·ªõi ng√†nh ngh·ªÅ:
        ‚Ä¢ T·∫°i sao quan tr·ªçng trong industry context
        ‚Ä¢ Key concepts/skills/techniques c·∫ßn master
        ‚Ä¢ Practical implementation v·ªõi industry examples
        ‚Ä¢ Best practices v√† industry standards
        ‚Ä¢ Common challenges v√† solutions
        ‚Ä¢ Connection v·ªõi broader workflow/process
        ‚Ä¢ Immediate applications trong real work
        TONE ph√π h·ª£p v·ªõi professional level v√† industry culture.",
      "example": {
        "des_short": "string (~150 k√Ω t·ª± - industry-relevant scenario)",
        "code": "string (~200 k√Ω t·ª± - templates/tools/resources specific to field)"
      },
      "practice": "string (100-250 k√Ω t·ª± - industry-appropriate exercise v·ªõi professional relevance)"
    }
  ]
}

VALIDATION cho m·ªçi ng√†nh ngh·ªÅ:
‚úÖ S·ªë b√†i realistic cho industry complexity
‚úÖ Duration based on actual professional practice time
‚úÖ Content relevant to current industry standards
‚úÖ Progression matches professional development path
‚úÖ Examples from real industry scenarios
‚úÖ Outcomes applicable to actual work situations
‚úÖ Language v√† terminology appropriate for field
‚úÖ Tools v√† resources currently used in industry

INDUSTRY-SPECIFIC ADAPTATIONS:
- **Healthcare:** Include safety, ethics, regulations
- **Finance:** Include compliance, risk management
- **Creative:** Include portfolio development, client relations
- **Technical:** Include troubleshooting, documentation
- **Business:** Include ROI, stakeholder management
- **Education:** Include assessment, differentiation
- **Trades:** Include safety, tool maintenance, quality control
"""

        val response: GeminiResponse = client.post("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent") {
            contentType(ContentType.Application.Json)
            parameter("key", getGeminiKey.returnkey())
            setBody(
                GeminiRequest(
                    contents = listOf(
                        Content(
                            parts = listOf(
                                Part(text = systemPrompt)
                            )
                        )
                    )
                )
            )
        }.body()

        val fullResponse = response.candidates.firstOrNull()?.content?.parts?.firstOrNull()?.text
            ?: "Kh√¥ng c√≥ ph·∫£n h·ªìi"

        // T√°ch ph·∫ßn JSON v√† ph·∫ßn hi·ªÉn th·ªã
        val (displayText, jsonData) = extractCourseData(fullResponse)

        // L∆∞u JSON v√†o final_export (ch·ªâ dev th·∫•y)
        final_export = jsonData

        // Tr·∫£ v·ªÅ ph·∫ßn hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
        return displayText
    }

    private fun buildConversationContext(chatHistory: List<ChatMessage>): String {
        if (chatHistory.isEmpty()) {
            return "L·ªäCH S·ª¨ H·ªòI THO·∫†I: Ch∆∞a c√≥ cu·ªôc h·ªôi tho·∫°i n√†o."
        }

        val context = StringBuilder("L·ªäCH S·ª¨ H·ªòI THO·∫†I:\n")
        chatHistory.forEach { message ->
            val role = if (message.isUser) "Ng∆∞·ªùi d√πng" else "Bot"
            context.append("$role: ${message.message}\n")
        }

        // Ph√¢n t√≠ch th√¥ng tin ƒë√£ c√≥
        context.append("\nPH√ÇN T√çCH TH√îNG TIN ƒê√É C√ì:\n")
        context.append(analyzeCollectedInfo(chatHistory))

        return context.toString()
    }

    private fun analyzeCollectedInfo(chatHistory: List<ChatMessage>): String {
        val userMessages = chatHistory.filter { it.isUser }.map { it.message.lowercase() }
        val analysis = StringBuilder()

        // Ki·ªÉm tra ch·ªß ƒë·ªÅ
        val topicKeywords = listOf("thi·∫øt k·∫ø ƒë·ªì h·ªça", "python", "marketing", "l·∫≠p tr√¨nh", "n·∫•u ƒÉn", "ti·∫øng anh")
        val foundTopic = topicKeywords.find { keyword ->
            userMessages.any { it.contains(keyword) }
        }
        if (foundTopic != null) {
            analysis.append("- Ch·ªß ƒë·ªÅ: $foundTopic\n")
        } else {
            analysis.append("- Ch·ªß ƒë·ªÅ: Ch∆∞a r√µ\n")
        }

        // Ki·ªÉm tra ƒë·ªëi t∆∞·ª£ng
        val audienceKeywords = mapOf(
            "ng∆∞·ªùi m·ªõi" to "beginner",
            "m·ªõi b·∫Øt ƒë·∫ßu" to "beginner",
            "sinh vi√™n" to "student",
            "chuy√™n nghi·ªáp" to "professional",
            "doanh nghi·ªáp" to "business"
        )
        val foundAudience = audienceKeywords.entries.find { (keyword, _) ->
            userMessages.any { it.contains(keyword) }
        }
        if (foundAudience != null) {
            analysis.append("- ƒê·ªëi t∆∞·ª£ng: ${foundAudience.key}\n")
        } else {
            analysis.append("- ƒê·ªëi t∆∞·ª£ng: Ch∆∞a r√µ\n")
        }

        return analysis.toString()
    }

    private fun extractCourseData(response: String): Pair<String, String?> {
        val jsonStartTag = "<COURSE_JSON>"
        val jsonEndTag = "</COURSE_JSON>"

        val jsonStartIndex = response.indexOf(jsonStartTag)
        val jsonEndIndex = response.indexOf(jsonEndTag)

        return if (jsonStartIndex != -1 && jsonEndIndex != -1) {
            val displayText = response.substring(0, jsonStartIndex).trim()
            val jsonData = response.substring(jsonStartIndex + jsonStartTag.length, jsonEndIndex).trim()
            Pair(displayText, jsonData)
        } else {
            // N·∫øu kh√¥ng t√¨m th·∫•y JSON, tr·∫£ v·ªÅ to√†n b·ªô response l√†m display text
            Pair(response, null)
        }
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ dev l·∫•y final_export (c√≥ th·ªÉ g·ªçi t·ª´ debug ho·∫∑c admin panel)
    fun getFinalExport(): String? {
        return final_export
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ clear final_export
    fun clearFinalExport() {
        final_export = null
    }

    // Reset collected info cho session m·ªõi
    fun resetSession() {
        collectedInfo.clear()
        final_export = null
    }
}